// /admin/js/table-manager.js

if (role === "MANAGER") {
    document.getElementById("adminActions").style.display = "block";
}
const BASE_URL = window.APP_BASE_URL || location.origin;

// ===== state =====
let _isFirstLoad = true;                 // nh√°y khi reload l·∫ßn ƒë·∫ßu
const _prevOrders = {};                  // { [tableId]: { totalAmount, itemCount } }
let _stomp = null;                       // websocket client
let _renderToken = 0;                    // ch·∫∑n render ch·ªìng

// ===== helpers =====
const $id = (s) => document.getElementById(s);
function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }

// Parse JSON an to√†n (body r·ªóng => null)
async function jsonOrNull(res) {
  const raw = await res.text();
  if (!raw) return null;
  try { return JSON.parse(raw); } catch { return null; }
}

// highlight ti·ªán d·ª•ng (ƒë√£ c√≥ CSS .highlight trong style.css)
function highlightCard(cardEl) {
  if (!cardEl) return;
  cardEl.classList.add('highlight');
  setTimeout(() => cardEl.classList.remove('highlight'), 5000);
}

// ===== render =====
window.loadTables = async function () {
  const myToken = ++_renderToken;

  const filter = $id('tableFilter')?.value || 'ALL';
  const container = $id('tableContainer');
  container.innerHTML = `<div style="text-align:center;color:#6b7280;padding:16px;">ƒêang t·∫£i...</div>`;

  try {
    const res = await $fetch(`${BASE_URL}/api/tables`);
    if (!res.ok) throw new Error(await $readErr(res));
    const tables = await res.json();
    if (myToken !== _renderToken) return;

    container.innerHTML = '';

    const list = tables
      .filter(t => filter === 'ALL' || t.status === filter)
      .sort((a, b) => Number(a.tableNumber) - Number(b.tableNumber));

    if (list.length === 0) {
      container.innerHTML = `<div style="text-align:center;color:#6b7280;padding:16px;">Kh√¥ng c√≥ b√†n ph√π h·ª£p.</div>`;
      _isFirstLoad = false;
      return;
    }

    for (const t of list) {
      if (myToken !== _renderToken) return;

      const card = document.createElement('div');
      card.className = 'table-card';
      card.dataset.tableId = t.id;
      card.innerHTML = `
        <h3>B√†n ${t.tableNumber}</h3>
        <p class="status">Tr·∫°ng th√°i: <strong>${t.status}</strong></p>
        <p class="total">T·ªïng ti·ªÅn: <span class="total-amount">0 VND</span></p>
        <div class="actions">
          <button class="btn btn-detail" onclick="showDetails(${t.id})">Chi ti·∫øt</button>
          <span class="pay-slot"></span>
          ${window.role === 'MANAGER' ? `
            <div style="display:inline-flex;gap:8px;flex-wrap:wrap;margin-left:8px;">
              <button class="btn" onclick="showEditTable(${t.id})">‚úèÔ∏è</button>
              <button class="btn" onclick="deleteTable(${t.id})">üóëÔ∏è</button>
            </div>` : ''
          }
        </div>
      `;
      container.appendChild(card);

      try {
        const r = await $fetch(`${BASE_URL}/api/orders/table/${t.id}/current`);

        if (r.status === 404 || r.status === 204) {
          if (_isFirstLoad && t.status === 'ƒêang ph·ª•c v·ª•') highlightCard(card);
          _prevOrders[t.id] = { totalAmount: 0, itemCount: 0 };
          continue;
        }

        if (r.ok) {
          const order = await jsonOrNull(r);
          if (!order) {
            if (_isFirstLoad && t.status === 'ƒêang ph·ª•c v·ª•') highlightCard(card);
            _prevOrders[t.id] = { totalAmount: 0, itemCount: 0 };
            continue;
          }

          const total = order.totalAmount ?? 0;
          const count = Array.isArray(order.orderItems) ? order.orderItems.length : 0;

          card.querySelector('.total-amount').textContent =
            `${Number(total).toLocaleString('vi-VN')} VND`;

          const paySlot = card.querySelector('.pay-slot');
          if (paySlot) {
            paySlot.innerHTML =
              `<button class="btn btn-pay" onclick="pay(${order.id}, ${t.id})">Thanh to√°n</button>`;
          }

          const prev = _prevOrders[t.id];
          const changed = !prev || prev.totalAmount !== total || prev.itemCount !== count;
          if (_isFirstLoad && (t.status === 'ƒêang ph·ª•c v·ª•' || total > 0 || count > 0)) highlightCard(card);
          if (!_isFirstLoad && changed) highlightCard(card);

          _prevOrders[t.id] = { totalAmount: total, itemCount: count };
        } else {
          _prevOrders[t.id] = { totalAmount: 0, itemCount: 0 };
        }
      } catch {
        // b·ªè qua l·ªói l·∫ª c·ªßa t·ª´ng b√†n
      }
    }

    _isFirstLoad = false;
  } catch (e) {
    if (myToken !== _renderToken) return;
    container.innerHTML = `<div style="text-align:center;color:#ef4444;padding:16px;">Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†n</div>`;
    console.error(e);
  }
};

// Order detail
window.showDetails = async function (tableId) {
  window.currentOpenTableId = tableId;
  const modal = $id('modal');
  const body  = $id('modalBody');
 

  body.innerHTML = `<div style="text-align:center;color:#6b7280;padding:12px;">ƒêang t·∫£i...</div>`;
  modal.style.display = 'flex';

  try {
    const res = await $fetch(`${BASE_URL}/api/orders/table/${tableId}/current`);

    if (res.status === 404 || res.status === 204) {
      body.innerHTML = `<div style="text-align:center;color:#6b7280;padding:16px;">Kh√¥ng c√≥ ƒë∆°n hi·ªán t·∫°i</div>`;
      return;
    }

    if (!res.ok) {
      const m = await $readErr(res);
      body.innerHTML = `<div style="text-align:center;color:#ef4444;padding:16px;">${m || 'L·ªói t·∫£i chi ti·∫øt ƒë∆°n'}</div>`;
      return;
    }

    const order = await jsonOrNull(res);
    const items = Array.isArray(order?.orderItems) ? order.orderItems : [];

    if (items.length === 0) {
      body.innerHTML = `<div style="text-align:center;color:#6b7280;padding:16px;">Kh√¥ng c√≥ m√≥n trong ƒë∆°n</div>`;
      return;
    }

    body.innerHTML = items.map(it => `
      <div class="order-item ${it.prepared ? 'prepared' : ''}">
        <strong>${it.menuItem?.name || ''} x${it.quantity}</strong>
        ${it.notes ? `<div class="order-note">Ghi ch√∫: ${it.notes}</div>` : ''}

        <div style="display:flex; gap:8px; align-items:center;">
          ${it.prepared
            ? `<span class="status-prepared">ƒê√£ l√†m</span>`
            : `<button class="btn-prepared" onclick="markPrepared(${it.id})">ƒê√£ xong</button>
              <button class="btn-cancel-item" onclick="cancelItem(${it.id})">H·ªßy m√≥n</button>`}
        </div>
      </div>
    `).join('');
  } catch (e) {
    body.innerHTML = `<div style="text-align:center;color:#ef4444;padding:16px;">${e.message || 'L·ªói k·∫øt n·ªëi'}</div>`;
  }
};
window.closeModal = function () { $id('modal').style.display = 'none'; };

// H·ªßy m√≥n
window.cancelItem = async function(itemId){
  if (!confirm('H·ªßy m√≥n n√†y?')) return;
  try{
    const res = await $fetch(`${BASE_URL}/api/orders/items/${itemId}`, { method:'DELETE' });
    if (!res.ok) throw new Error(await $readErr(res));

    // Reload l·∫°i modal & danh s√°ch (WS c≈©ng s·∫Ω b·∫Øn)
    if (typeof window.currentOpenTableId === 'number') {
      showDetails(window.currentOpenTableId);
    } else {
      loadTables();
    }
  }catch(e){
    alert(e.message || 'H·ªßy m√≥n th·∫•t b·∫°i');
  }
};

// Mark item as prepared
window.markPrepared = async function(itemId){
    try{
      await $fetch(`${BASE_URL}/api/orders/items/${itemId}/prepared`, { method:'PUT' });
      // L√†m t∆∞∆°i modal n·∫øu ƒëang m·ªü
      const opened = document.getElementById('modal').style.display === 'flex';
      if (opened && typeof window.currentOpenTableId === 'number') {
        showDetails(window.currentOpenTableId); // re-render chi ti·∫øt
      }
      // B·∫£ng tr·∫°ng th√°i/ti·ªÅn s·∫Ω t·ª± c·∫≠p nh·∫≠t do WS "/topic/tables"
    }catch(e){ /* ignore */ }
};

// Thanh to√°n ƒë∆°n h√†ng
window.pay = async function (orderId, tableId) {
  const uid = localStorage.getItem('userId');
  if (!uid) { alert('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng'); return; }
  try {
    const res = await $fetch(`${BASE_URL}/api/orders/${orderId}/pay?userId=${uid}`, { method: 'PUT' });
    if (!res.ok) throw new Error(await $readErr(res));
    alert('Thanh to√°n th√†nh c√¥ng!');
    // WS s·∫Ω b·∫Øn s·ª± ki·ªán v√† loadTables() s·∫Ω ch·∫°y l·∫°i
  } catch (e) {
    alert(e.message || 'Thanh to√°n th·∫•t b·∫°i');
  }
};

// =========================
// CRUD B√ÄN (Add / Edit / Delete)
// =========================

// --- Th√™m b√†n ---
window.showAddTable = function () {
  if (window.role && window.role !== 'MANAGER') return;
  $id('newTableNumber').value = '';
  $id('newTableCapacity').value = '';
  const err = $id('addTableError');
  err.textContent = '';
  err.style.display = 'none';
  $id('addTableModal').style.display = 'flex';
};

window.closeAddTableModal = function () {
  $id('addTableModal').style.display = 'none';
};

window.submitNewTable = async function () {
  if (window.role && window.role !== 'MANAGER') return;

  const number = ($id('newTableNumber').value || '').trim();
  const capacity = Number($id('newTableCapacity').value || 0);
  const err = $id('addTableError');

  err.textContent = '';
  err.style.display = 'none';

  // validate ƒë∆°n gi·∫£n
  if (!number || isNaN(Number(number)) || capacity <= 0) {
    err.textContent = 'Vui l√≤ng nh·∫≠p s·ªë b√†n h·ª£p l·ªá v√† s·ª©c ch·ª©a > 0';
    err.style.display = 'block';
    return;
  }

  try {
    const res = await $fetch(`${BASE_URL}/api/tables`, {
      method: 'POST',
      body: JSON.stringify({
        tableNumber: String(number),
        capacity: capacity,
        status: 'Tr·ªëng',
        qrCodeUrl: '' // cho ph√©p r·ªóng
      })
    });

    if (!res.ok) {
      const m = await $readErr(res);
      throw new Error(m || 'L·ªói khi th√™m b√†n');
    }

    closeAddTableModal();
    loadTables();
  } catch (e) {
    err.textContent = e.message || 'ƒê√£ x·∫£y ra l·ªói';
    err.style.display = 'block';
  }
};

// --- S·ª≠a b√†n ---
let _currentEditTableId = null;

window.showEditTable = async function (id) {
  if (window.role && window.role !== 'MANAGER') return;

  const err = $id('editTableError');
  err.textContent = '';
  err.style.display = 'none';

  try {
    const res = await $fetch(`${BASE_URL}/api/tables/${id}`);
    if (!res.ok) throw new Error(await $readErr(res));
    const t = await res.json();

    _currentEditTableId = id;
    $id('editTableNumber').value = t.tableNumber ?? '';
    $id('editQrCodeUrl').value  = t.qrCodeUrl ?? '';
    $id('editStatus').value     = t.status ?? 'Tr·ªëng';
    $id('editCapacity').value   = t.capacity ?? 1;

    $id('editTableModal').style.display = 'flex';
  } catch (e) {
    alert(e.message || 'Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin b√†n');
  }
};

window.closeEditTableModal = function () {
  _currentEditTableId = null;
  $id('editTableModal').style.display = 'none';
};

window.submitEditTable = async function () {
  if (window.role && window.role !== 'MANAGER') return;
  if (!_currentEditTableId) return;

  const status = $id('editStatus').value;
  const capacity = Number($id('editCapacity').value || 0);
  const err = $id('editTableError');

  err.textContent = '';
  err.style.display = 'none';

  if (!status || capacity <= 0) {
    err.textContent = 'Vui l√≤ng nh·∫≠p tr·∫°ng th√°i v√† s·ª©c ch·ª©a h·ª£p l·ªá';
    err.style.display = 'block';
    return;
  }

  try {
    const res = await $fetch(`${BASE_URL}/api/tables/${_currentEditTableId}`, {
      method: 'PUT',
      body: JSON.stringify({ status, capacity })
    });

    if (!res.ok) throw new Error(await $readErr(res));

    closeEditTableModal();
    loadTables();
  } catch (e) {
    err.textContent = e.message || 'L·ªói c·∫≠p nh·∫≠t';
    err.style.display = 'block';
  }
};

// --- X√≥a b√†n ---
window.deleteTable = async function (id) {
  if (window.role && window.role !== 'MANAGER') return;
  if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√†n n√†y?')) return;

  try {
    const res = await $fetch(`${BASE_URL}/api/tables/${id}`, { method: 'DELETE' });
    if (!res.ok) throw new Error(await $readErr(res));
    loadTables();
  } catch (e) {
    alert(e.message || 'Kh√¥ng th·ªÉ x√≥a b√†n');
  }
};


// ===== WS =====
function connectWebSocket() {
  try {
    const socket = new SockJS(`${BASE_URL}/ws`);
    _stomp = Stomp.over(socket);
    _stomp.debug = () => {};
    _stomp.connect({}, () => {
      _stomp.subscribe('/topic/tables', async () => {
        await sleep(200);  // ch·ªù backend commit
        loadTables();
      });
    });
  } catch (e) {
    console.warn('WS connect error:', e);
  }
}

// ===== boot =====
window.addEventListener('DOMContentLoaded', () => {
  loadTables();
  connectWebSocket();
});
